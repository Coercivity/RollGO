// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(LobbyDbContext))]
    [Migration("20231223152010_fixDiscriminator")]
    partial class fixDiscriminator
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EntertainmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("Countries")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("varchar")
                        .HasColumnName("Description");

                    b.Property<int>("FilmLength")
                        .HasColumnType("integer")
                        .HasColumnName("FilmLength");

                    b.Property<string[]>("Genres")
                        .HasColumnType("text[]");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ImdbId");

                    b.Property<bool>("IsSeries")
                        .HasColumnType("boolean");

                    b.Property<string>("KinopoiskId")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("KinopoiskId");

                    b.Property<string>("NameEn")
                        .HasColumnType("varchar")
                        .HasColumnName("NameEn");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("NameRu");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("varchar")
                        .HasColumnName("PosterUrl");

                    b.Property<double>("RatingImdb")
                        .HasColumnType("double precision")
                        .HasColumnName("RatingImdb");

                    b.Property<double>("RatingKinopoisk")
                        .HasColumnType("double precision")
                        .HasColumnName("RatingKinopoisk");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar")
                        .HasColumnName("ShortDescription");

                    b.Property<string>("WebUrl")
                        .HasColumnType("varchar")
                        .HasColumnName("WebUrl");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("EntertainmentEntity");

                    b.HasDiscriminator<bool>("IsSeries");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Lobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("AdminId");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Lobby", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43af2362-7855-4ae9-bba1-e6394e01a469"),
                            AdminId = new Guid("79d52242-5076-45e3-aa17-79ff41281ec7"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6339),
                            Name = "Barbara Nelson"
                        },
                        new
                        {
                            Id = new Guid("34e65be4-1a44-4d50-9803-f364d2cc9ac1"),
                            AdminId = new Guid("d2620132-a31f-4b35-b5c3-2fc4ce59493c"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6351),
                            Name = "Elizabeth Robinson"
                        },
                        new
                        {
                            Id = new Guid("716c383b-7373-405a-9744-ed933799f862"),
                            AdminId = new Guid("160eed34-7233-402b-a961-f8579e99d2b2"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6354),
                            Name = "David Hernandez"
                        },
                        new
                        {
                            Id = new Guid("3df7a4b9-cfe9-418a-9a08-4c5503533f91"),
                            AdminId = new Guid("b4a3fe96-a4c2-4629-a59e-c5dd2664186d"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6357),
                            Name = "Andre Hill"
                        },
                        new
                        {
                            Id = new Guid("c794ad7a-a5d6-4f81-9d66-2bd399a3d720"),
                            AdminId = new Guid("fd096a11-cbdc-4807-a07a-285f905f4572"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6361),
                            Name = "Matthew Hall"
                        },
                        new
                        {
                            Id = new Guid("8467ff00-38dd-4515-b0bf-0d288fc0ca75"),
                            AdminId = new Guid("34ed9b8f-4cef-41d5-8ea2-d9e5ff3617f2"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6365),
                            Name = "Betty Jackson"
                        },
                        new
                        {
                            Id = new Guid("0b350621-1846-41e8-a754-eca73f225be0"),
                            AdminId = new Guid("f19d255c-8a7d-4081-b2a0-f489ac6266dc"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6368),
                            Name = "Shirley Green"
                        },
                        new
                        {
                            Id = new Guid("1391e6e5-0408-4e9b-896a-7f46b8846067"),
                            AdminId = new Guid("07d2313a-0b27-412c-852b-ceb894bd7c1e"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6372),
                            Name = "Samuel Gonzalez"
                        },
                        new
                        {
                            Id = new Guid("82231ec2-b463-4783-8027-2ea6c2c971de"),
                            AdminId = new Guid("fbfe2cbd-e18c-4af3-b5bc-9b18db6b1616"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6374),
                            Name = "Liam Flores"
                        },
                        new
                        {
                            Id = new Guid("a17df574-89f7-4f8c-99b8-c72586de30ec"),
                            AdminId = new Guid("be459c5c-0c38-4adc-be85-12c3d0c607d4"),
                            CreatedDateTime = new DateTime(2023, 12, 23, 15, 20, 10, 12, DateTimeKind.Utc).AddTicks(6379),
                            Name = "Julian Rodriguez"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("IsActive");

                    b.Property<Guid>("LobbyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.ToTable("Meeting", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<Guid>("LobbyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.ToTable("UserWeight", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Film", b =>
                {
                    b.HasBaseType("Domain.Entities.EntertainmentEntity");

                    b.HasDiscriminator().HasValue(false);
                });

            modelBuilder.Entity("Domain.Entities.Series", b =>
                {
                    b.HasBaseType("Domain.Entities.EntertainmentEntity");

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("Domain.Entities.Meeting", b =>
                {
                    b.HasOne("Domain.Entities.Lobby", "Lobby")
                        .WithMany("Meetings")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("Domain.Entities.UserWeight", b =>
                {
                    b.HasOne("Domain.Entities.Lobby", "Lobby")
                        .WithMany("UserWeights")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("Domain.Entities.Lobby", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("UserWeights");
                });
#pragma warning restore 612, 618
        }
    }
}
